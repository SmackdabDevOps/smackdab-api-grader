# ============================================================================
# SMACKDAB MASTER API TEMPLATE v3.0
# ============================================================================
# This is the CANONICAL template all Smackdab APIs MUST follow
# Grade: 100/100 when properly implemented
# Last Updated: 2025-01-08
# Changes from v2.0:
# - Cleaner path structure (no duplication between servers and paths)
# - Better HTTP semantics (304 Not Modified, proper caching)
# - Removed speculative extensions (x-verita-entity, x-efv-enabled, x-smackflow)
# - Kept only proven extensions that exist in codebase
# v3.1 updates (2025-01-08):
# - Added idempotency key parameter for POST/PATCH operations
# - Enhanced rate-limit headers and responses
# - Added consistency control header for reads
# - Improved sort parameter for better SDK compatibility
# - Added platform constraints for linter enforcement
# - Enhanced webhook policy with shared metadata schema
# - Added request ID tracing throughout
# v3.2 PRODUCTION LOCK-IN (2025-01-08):
# - Async operations pattern with job status tracking
# - W3C trace context headers for observability
# - Enhanced idempotency semantics documentation
# - Complete HTTP semantics (405, 406, 415, 428, 503)
# - Rate-limit headers on cacheable/read responses (200, 201, 206)
# - Webhook security hardening with HMAC-SHA256
# - Versioning and deprecation headers (RFC 8594)
# - Content negotiation and CORS documentation
# - Dual BIGINT/UUID support for Organization/Branch headers (migration path)
# - Separate ResourceId (UUID) and ResourceKey (opaque) parameters for safer refactoring
# - Cleaned up deepObject filter (removed redundant explode)
# - Added scope placeholder replacement notes
# v3.2.1 FINAL POLISH (2025-01-08):
# - Clarified PATCH content types (JSON partial vs merge-patch)
# - Added sparse fieldsets and include/expand parameters for payload control
# - Documented global error responses that apply to all endpoints
# - Corrected rate-limit header promise (cacheable responses only)
# v3.2.2 ENTERPRISE LOCK (2025-01-08):
# - Fixed OAuth2 security scopes with per-operation examples
# - Added rate-limit headers to DELETE 204 for full consistency
# - Added 415 UnsupportedMediaType to POST/PATCH operations
# - Created reusable ResponseMeta schema for consistency
# - Added operationId uniqueness requirement note
# - Added 503 ServiceUnavailable to all read paths
# - Added Sunset header example for BIGINT→UUID migration
# - Updated examples to use concrete values (inventory/products)
# - Documented HMAC-SHA256 webhook verification process
# v3.2.3 FINAL PRODUCTION LOCK (2025-01-08):
# - Added rate-limit headers to 202 Accepted responses for full consistency
# - Added Accept-Language parameter for content negotiation
# - Verified 428 responses on PATCH/DELETE operations
# - Verified PATCH content types with merge semantics
# ============================================================================

openapi: 3.0.3  # MANDATORY: Use 3.0.3 for maximum compatibility
# IMPORTANT: All operationIds must be globally unique to prevent SDK name collisions

# ============================================================================
# GLOBAL ERROR RESPONSES
# ============================================================================
# The following error responses apply globally to ALL endpoints:
# - 401 Unauthorized: Invalid or missing authentication
# - 403 Forbidden: Insufficient permissions
# - 405 Method Not Allowed: HTTP method not supported for endpoint
# - 406 Not Acceptable: Cannot produce requested media type
# - 415 Unsupported Media Type: Request content-type not supported
# - 429 Too Many Requests: Rate limit exceeded
# - 500 Internal Server Error: Unexpected server error
# - 503 Service Unavailable: Temporary service outage
# These are defined in components/responses but not repeated on every operation

# ============================================================================
# API METADATA
# ============================================================================
info:
  title: Smackdab {Domain} - {Specific Function} API  # Format: Domain - Function
  description: |
    # {API Name} API
    
    {One paragraph executive summary}
    
    ## Key Features
    - {Feature 1 with business value}
    - {Feature 2 with technical capability}
    - {Feature 3 with integration points}
    
    ## Business Rules Implemented
    - **RULE-XXX-001**: {Description and impact}
    - **RULE-XXX-002**: {Description and constraints}
    
    ## Technical Architecture (SMACKDAB MANDATORY STACK)
    - **Database**: PostgreSQL with Citus distribution by organization_id
    - **Caching**: Dragonfly/Valkey (Redis-compatible) - NOT Redis directly
    - **Events**: Apache Pulsar - NOT Kafka, NOT RabbitMQ, NOT SQS
    - **Search**: PostgreSQL full-text search - NOT Elasticsearch
    - **Real-time**: WebSocket with Apache Pulsar backing
    - **NO SAGA PATTERN** - Use event-driven with Pulsar instead
    - **NO MATERIALIZED VIEWS** - Use regular views or denormalized tables
    - **NO FOREIGN KEYS** across distributed tables (Citus requirement)
    
    ## Performance Characteristics
    - Read operations: <100ms p95
    - Write operations: <500ms p95
    - Bulk operations: 10,000 records/minute
    - Availability target: 99.95%
    
    ## Security Model
    - OAuth2 with granular scopes
    - Multi-tenant isolation via headers (X-Organization-ID, X-Branch-ID)
    - Rate limiting per tenant and tier
    - Audit logging for compliance
    - JWT claims include org_id and branch_id for Citus routing
    
    ## Error Response Guidelines
    - **409 Conflict**: Resource state conflict (already exists, version mismatch, idempotency key reuse with different body)
    - **422 Unprocessable Entity**: Valid syntax but semantic/business rule violations (validation failures, constraint violations)
    
  version: 3.2.3  # Semantic versioning - Final production lock
  contact:
    name: Smackdab API Support
    email: api-support@smackdab.com
    url: https://docs.smackdab.com/{domain}
  license:
    name: Proprietary
    url: https://smackdab.com/license

# ============================================================================
# SERVERS (CLEAN STRUCTURE - NO PATH DUPLICATION)
# ============================================================================
servers:
  - url: https://api.smackdab.com
    description: Production server
  - url: https://staging-api.smackdab.com
    description: Staging server
  - url: http://localhost:8000
    description: Development server

# ============================================================================
# TAGS (LOGICAL GROUPING)
# ============================================================================
tags:
  - name: {Resource}
    description: Operations related to {resource} management
    x-displayName: {Resource} Management
  - name: Bulk Operations
    description: Bulk operations for performance
    x-displayName: Bulk Operations
  - name: Admin
    description: Administrative operations
    x-displayName: Administration
  - name: Jobs
    description: Async job status and management
    x-displayName: Job Management

# ============================================================================
# SECURITY SCHEMES
# ============================================================================
security:
  # Default: OAuth2 (preferred) OR Bearer JWT.
  # ApiKey is reserved for webhooks/service-to-service only.
  # NOTE: Empty scope list [] is intentional for template. 
  # Concrete APIs MUST set per-operation scopes (e.g., read:{domain}, write:{domain})
  # ⚠️ IMPORTANT: Replace {domain} placeholders with concrete scopes BEFORE publishing.
  # Specs with unresolved placeholders will FAIL CI (Spectral rule: smackdab-no-placeholders).
  - OAuth2: []
  - BearerAuth: []

# ============================================================================
# PATHS - CLEAN STRUCTURE
# ============================================================================
paths:
  /api/v2/{domain}/{resources}:
    parameters:
      - $ref: '#/components/parameters/DomainPath'
      - $ref: '#/components/parameters/OrganizationHeader'
      - $ref: '#/components/parameters/BranchHeader'
      - $ref: '#/components/parameters/RequestId'
    
    get:
      summary: List {Resources}
      description: Retrieve a paginated list of {resources}
      operationId: list{Resources}
      tags:
        - {Resource}
      security:
        # Example: Replace {domain} with actual domain (e.g., inventory, financial)
        - OAuth2: ["read:{domain}"]
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/AfterKey'
        - $ref: '#/components/parameters/BeforeKey'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Sort'
        - $ref: '#/components/parameters/Filters'
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Include'
        - $ref: '#/components/parameters/IfNoneMatch'
        - $ref: '#/components/parameters/Consistency'
      responses:
        '200':
          description: Successful response
          headers:
            # Caching note: cacheable responses SHOULD include a Vary header reflecting
            # content negotiation and tenant-affecting headers.
            Vary:
              $ref: '#/components/headers/Vary'
            X-Total-Count:
              schema:
                type: integer
              description: Total number of items
            ETag:
              $ref: '#/components/headers/ETag'
            Cache-Control:
              $ref: '#/components/headers/CacheControl'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimitLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateLimitRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateLimitReset'
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
              example:
                success: true
                data:
                  - id: "res_123"
                    # ... resource fields
                meta:
                  pagination:
                    after_key: "res_124"
                    has_more: true
                    total_count: 150
                _links:
                  self:
                    href: "/api/v2/inventory/products?after_key=res_123"
                    method: "GET"
                  next:
                    href: "/api/v2/inventory/products?after_key=res_124"
                    method: "GET"
        '304':
          description: Not Modified (ETag matched)
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '429':
          $ref: '#/components/responses/TooManyRequests'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailable'

    post:
      summary: Create {Resource}
      description: Create a new {resource}
      operationId: create{Resource}
      tags:
        - {Resource}
      security:
        - OAuth2: ["write:{domain}"]
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{Resource}Create'
      responses:
        '201':
          description: Created successfully
          headers:
            Location:
              schema:
                type: string
              description: URI of created resource
            ETag:
              $ref: '#/components/headers/ETag'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimitLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateLimitRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateLimitReset'
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '202':
          description: Accepted for async processing
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URI to check job status (/api/v2/{domain}/jobs/{job_id})
            Retry-After:
              schema:
                type: integer
              description: Estimated seconds until processing completes
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimitLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateLimitRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateLimitReset'
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'

  /api/v2/{domain}/{resources}/{id}:
    parameters:
      - $ref: '#/components/parameters/DomainPath'
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/OrganizationHeader'
      - $ref: '#/components/parameters/BranchHeader'
      - $ref: '#/components/parameters/RequestId'
    
    get:
      summary: Get {Resource}
      operationId: get{Resource}
      tags:
        - {Resource}
      parameters:
        - $ref: '#/components/parameters/Fields'
        - $ref: '#/components/parameters/Include'
        - $ref: '#/components/parameters/IfNoneMatch'
        - $ref: '#/components/parameters/Consistency'
      responses:
        '200':
          description: Successful response
          headers:
            # Example: Add these headers during BIGINT→UUID migration:
            # Sunset:
            #   $ref: '#/components/headers/Sunset'
            # Link:
            #   $ref: '#/components/headers/Link'  # rel="deprecation"
            ETag:
              $ref: '#/components/headers/ETag'
            Cache-Control:
              $ref: '#/components/headers/CacheControl'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimitLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateLimitRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateLimitReset'
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '304':
          description: Not Modified
        '404':
          $ref: '#/components/responses/NotFound'

    patch:
      summary: Update {Resource}
      operationId: update{Resource}
      tags:
        - {Resource}
      parameters:
        - $ref: '#/components/parameters/IfMatch'
        - $ref: '#/components/parameters/IdempotencyKey'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{Resource}Update'
            description: |
              Partial update using JSON. Only fields present in request body are updated.
              Null values explicitly set the field to null. Omitted fields are unchanged.
          application/merge-patch+json:
            schema:
              $ref: '#/components/schemas/{Resource}Update'
            description: |
              RFC 7396 JSON Merge Patch format. Null means "remove this field".
      responses:
        '200':
          description: Updated successfully
          headers:
            ETag:
              $ref: '#/components/headers/ETag'
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimitLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateLimitRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateLimitReset'
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEnvelope'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '415':
          $ref: '#/components/responses/UnsupportedMediaType'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '428':
          $ref: '#/components/responses/PreconditionRequired'

    delete:
      summary: Delete {Resource}
      operationId: delete{Resource}
      tags:
        - {Resource}
      parameters:
        - $ref: '#/components/parameters/IfMatch'
      responses:
        '204':
          description: Deleted successfully
          headers:
            X-RateLimit-Limit:
              $ref: '#/components/headers/XRateLimitLimit'
            X-RateLimit-Remaining:
              $ref: '#/components/headers/XRateLimitRemaining'
            X-RateLimit-Reset:
              $ref: '#/components/headers/XRateLimitReset'
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '412':
          $ref: '#/components/responses/PreconditionFailed'
        '428':
          $ref: '#/components/responses/PreconditionRequired'

  # ==========================================================================
  # ASYNC JOB STATUS ENDPOINT
  # ==========================================================================
  /api/v2/{domain}/jobs/{job_id}:
    parameters:
      - $ref: '#/components/parameters/DomainPath'
      - name: job_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
        description: Async job identifier
      - $ref: '#/components/parameters/OrganizationHeader'
      - $ref: '#/components/parameters/BranchHeader'
      - $ref: '#/components/parameters/RequestId'
    
    get:
      summary: Get Async Job Status
      description: Check the status of a long-running asynchronous operation
      operationId: getJobStatus
      tags:
        - Jobs
      responses:
        '200':
          description: Job status retrieved
          headers:
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
            Retry-After:
              schema:
                type: integer
              description: Seconds to wait before retrying (for queued/running jobs)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AsyncJobStatus'
        '303':
          description: Job completed - see other location for result
          headers:
            Location:
              schema:
                type: string
                format: uri
              description: URI of the created/modified resource
            X-Request-ID:
              $ref: '#/components/headers/XRequestId'
        '404':
          $ref: '#/components/responses/NotFound'

# ============================================================================
# COMPONENTS
# ============================================================================
components:
  # ==========================================================================
  # SECURITY SCHEMES
  # ==========================================================================
  securitySchemes:
    OAuth2:
      type: oauth2
      description: OAuth2 authentication with organization context
      flows:
        authorizationCode:
          authorizationUrl: https://auth.smackdab.com/oauth/authorize
          tokenUrl: https://auth.smackdab.com/oauth/token
          refreshUrl: https://auth.smackdab.com/oauth/refresh
          scopes:
            # NOTE: Replace {domain} placeholders with concrete values in actual API contracts
            # Example: read:inventory, write:financial, admin:mobile
            read:{domain}: Read access to {domain}
            write:{domain}: Write access to {domain}
            delete:{domain}: Delete access to {domain}
            admin:{domain}: Full admin access to {domain}
    
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Bearer token with org_id and branch_id claims
    
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for service-to-service communication

  # ==========================================================================
  # PARAMETERS
  # ==========================================================================
  parameters:
    DomainPath:
      name: domain
      in: path
      required: true
      schema:
        type: string
        enum: [inventory, financial, mobile, admin]
      description: API domain
    
    ResourceId:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Resource identifier (UUID format for new resources)
    
    ResourceKey:
      name: key
      in: path
      required: true
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_-]+$'
      description: Resource key (opaque identifier for legacy or external resources)
    
    OrganizationHeader:
      name: X-Organization-ID
      in: header
      required: true
      schema:
        oneOf:
          - type: integer
            format: int64
          - type: string
            format: uuid
      description: |
        Organization context (required for Citus sharding).
        Accepts BIGINT (current) or UUID (migrating). UUID will become mandatory after sunset date.
        Migration timeline: UUID support added Q1 2025, BIGINT deprecated Q3 2025, removed Q1 2026.
    
    BranchHeader:
      name: X-Branch-ID
      in: header
      required: false
      schema:
        oneOf:
          - type: integer
            format: int64
          - type: string
            format: uuid
      description: |
        Branch context for multi-location operations.
        Accepts BIGINT (current) or UUID (migrating). UUID will become mandatory after sunset date.
        Migration timeline: UUID support added Q1 2025, BIGINT deprecated Q3 2025, removed Q1 2026.
    
    AfterKey:
      name: after_key
      in: query
      schema:
        type: string
      description: |
        Key-set pagination cursor (NOT offset). Format: {sort_field}:{unique_id}
        Tie-breaker rule: When sort field has duplicates, use primary key (id) as secondary sort.
        This ensures stable, deterministic ordering across pages.
      example: "res_123:2025-01-20T10:30:00Z"
    
    BeforeKey:
      name: before_key
      in: query
      schema:
        type: string
      description: Reverse pagination cursor
      example: "res_099:2025-01-18T09:05:00Z"
    
    Limit:
      name: limit
      in: query
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
      description: Number of items per page
    
    Sort:
      name: sort
      in: query
      schema:
        type: string
        pattern: '^([+-]?[a-zA-Z0-9_.]+)(,[+-]?[a-zA-Z0-9_.]+)*$'
      example: "+created_at,-name"
      description: Sort fields (+ascending, -descending) - comma-separated
    
    Filters:
      name: filter
      in: query
      schema:
        type: object
        additionalProperties:
          type: string
      style: deepObject
      description: Field filters using deep object notation (e.g., filter[status]=active&filter[sku]=ABC123)
      example:
        status: "active"
        sku: "ABC123"
    
    IfNoneMatch:
      name: If-None-Match
      in: header
      schema:
        type: string
      description: ETag for conditional requests
    
    IfMatch:
      name: If-Match
      in: header
      schema:
        type: string
      description: ETag for optimistic concurrency control
    
    IdempotencyKey:
      name: X-Idempotency-Key
      in: header
      required: false
      schema:
        type: string
        minLength: 16
        maxLength: 64
      description: |
        Prevents duplicate processing of unsafe requests using idempotency semantics.
        
        **Scope**: method + path + tenant (org_id + branch_id) + body-hash
        **TTL**: 24 hours (configurable)
        **Replay behavior**: 
        - Same key + same body = return original 200/201 with same ETag
        - Same key + different body = return 409 Conflict
        
        Example: "order-create-2025-01-08-uuid"
    
    Consistency:
      name: X-Consistency
      in: header
      schema:
        type: string
        enum: [best_effort, eventual, strong]
        default: eventual
      description: Controls read consistency vs snapshot cache
    
    Fields:
      name: fields
      in: query
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_]+(,[a-zA-Z0-9_]+)*$'
      description: |
        Sparse fieldsets - comma-separated list of fields to include in response.
        Reduces payload size by excluding unneeded fields.
      example: "id,name,sku,price"
    
    Include:
      name: include
      in: query
      schema:
        type: string
        pattern: '^[a-zA-Z0-9_]+(,[a-zA-Z0-9_]+)*$'
      description: |
        Related resources to include (expand) in response.
        Controls JOIN operations and nested resource loading.
      example: "category,supplier,images"
    
    AcceptLanguage:
      name: Accept-Language
      in: header
      required: false
      schema:
        type: string
        pattern: '^[a-z]{2}(-[A-Z]{2})?(,[a-z]{2}(-[A-Z]{2})?;q=[0-9.]+)*$'
      description: |
        Preferred languages for response (RFC 5646).
        Example: "en-US,es-MX;q=0.9,fr;q=0.8"
    
    RequestId:
      name: X-Request-ID
      in: header
      required: false
      schema:
        type: string
        format: uuid
      description: Request correlation ID for tracing
    
    TraceParent:
      name: traceparent
      in: header
      required: false
      schema:
        type: string
        pattern: '^[0-9a-f]{2}-[0-9a-f]{32}-[0-9a-f]{16}-[0-9a-f]{2}$'
      description: W3C Trace Context traceparent header (version-trace_id-parent_id-flags)
    
    TraceState:
      name: tracestate
      in: header
      required: false
      schema:
        type: string
      description: W3C Trace Context tracestate header for vendor-specific tracing data
    
    Baggage:
      name: baggage
      in: header
      required: false
      schema:
        type: string
      description: W3C Baggage header for context propagation
    
    AcceptVersion:
      name: Accept-Version
      in: header
      required: false
      schema:
        type: string
        pattern: '^v[0-9]+(\.[0-9]+)?$'
      description: Optional API version negotiation (e.g., v2, v2.1)

  # ==========================================================================
  # HEADERS
  # ==========================================================================
  headers:
    WWWAuthenticate:
      schema:
        type: string
        example: 'Bearer realm="smackdab", error="invalid_token", error_description="The access token is expired"'
      description: Authentication challenge per RFC 6750
    XRateLimitLimit:
      schema:
        type: integer
      description: The number of allowed requests in the current period
    
    XRateLimitRemaining:
      schema:
        type: integer
      description: The number of remaining requests in the current period
    
    XRateLimitReset:
      schema:
        type: integer
        format: int64
      description: The time at which the current rate limit window resets (Unix timestamp)
    
    XRequestId:
      schema:
        type: string
        format: uuid
      description: Request correlation ID echoed from X-Request-ID header
    
    ETag:
      schema:
        type: string
      description: Entity tag for caching / concurrency
    
    CacheControl:
      schema:
        type: string
        example: "private, max-age=60"
      description: Cache directive for the response
    
    Vary:
      schema:
        type: string
        example: 'Accept, Accept-Language, Accept-Encoding, X-Organization-ID, X-Branch-ID, Authorization'
      description: Response varies by these request headers (affects cache keys)
    
    Deprecation:
      schema:
        type: string
        format: date-time
      description: RFC 8594 - Date when this endpoint was deprecated
    
    Sunset:
      schema:
        type: string
        format: date-time
      description: RFC 8594 - Date when this endpoint will be removed
    
    Link:
      schema:
        type: string
      description: Link header with rel="deprecation" pointing to migration guide

  # ==========================================================================
  # SCHEMAS
  # ==========================================================================
  schemas:
    # ------------------------------------------------------------------------
    # Core Response Wrapper (MANDATORY FOR ALL RESPONSES)
    # ------------------------------------------------------------------------
    ResponseEnvelope:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success indicator
        data:
          description: Response payload (single item or array)
          nullable: true
        meta:
          $ref: '#/components/schemas/ResponseMeta'
        _links:
          $ref: '#/components/schemas/HATEOASLinks'
      required: [success, data, _links]
    
    # ------------------------------------------------------------------------
    # Error Response (RFC 7807 Problem Details)
    # ------------------------------------------------------------------------
    ProblemDetail:
      type: object
      required: [type, title, status, detail, instance]
      properties:
        type:
          type: string
          format: uri
          description: Problem type identifier
          example: "https://api.smackdab.com/problems/invalid-field"
        title:
          type: string
          description: Short human-readable summary
          example: "Invalid Field Value"
        status:
          type: integer
          description: HTTP status code
          example: 400
        detail:
          type: string
          description: Human-readable explanation
          example: "The field 'quantity' must be a positive integer"
        instance:
          type: string
          format: uri
          description: Reference to specific occurrence
          example: "/api/v2/inventory/products/123"
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
              code:
                type: string
        correlation_id:
          type: string
          format: uuid
          description: Request correlation ID for tracing
        request_id:
          type: string
          format: uuid
          description: Echoed from X-Request-ID header
    
    # ------------------------------------------------------------------------
    # HATEOAS Links (Level 3 REST)
    # ------------------------------------------------------------------------
    HATEOASLinks:
      type: object
      additionalProperties:
        type: object
        required: [href]
        properties:
          href:
            type: string
            format: uri
          method:
            type: string
            enum: [GET, POST, PUT, PATCH, DELETE]
          title:
            type: string
      example:
        self:
          href: "/api/v2/inventory/products/123"
          method: "GET"
        update:
          href: "/api/v2/inventory/products/123"
          method: "PATCH"
        delete:
          href: "/api/v2/inventory/products/123"
          method: "DELETE"
    
    # ------------------------------------------------------------------------
    # Response Meta
    # ------------------------------------------------------------------------
    ResponseMeta:
      type: object
      properties:
        request_id:
          type: string
          format: uuid
          description: Unique request identifier for tracing
        timestamp:
          type: string
          format: date-time
          description: Response timestamp
        version:
          type: string
          example: "v2"
          description: API version used
        organization_id:
          oneOf:
            - type: integer
              format: int64
            - type: string
              format: uuid
          description: Organization context
        branch_id:
          oneOf:
            - type: integer
              format: int64
            - type: string
              format: uuid
          description: Branch context (if applicable)
        pagination:
          $ref: '#/components/schemas/PaginationMeta'
        warnings:
          type: array
          items:
            type: string
          description: Non-fatal warnings
        debug:
          type: object
          description: Debug information (non-production only)
    
    # ------------------------------------------------------------------------
    # Pagination Meta
    # ------------------------------------------------------------------------
    PaginationMeta:
      type: object
      properties:
        after_key:
          type: string
          description: Next page cursor
          example: "res_124:2025-01-20T10:30:00Z"
        before_key:
          type: string
          description: Previous page cursor
          example: "res_099:2025-01-18T09:05:00Z"
        has_more:
          type: boolean
          description: More results available
          example: true
        total_count:
          type: integer
          description: Total items (expensive, avoid if possible)
          example: 150
    
    # ------------------------------------------------------------------------
    # Async Job Status
    # ------------------------------------------------------------------------
    AsyncJobStatus:
      type: object
      required: [job_id, status, created_at, updated_at]
      properties:
        job_id:
          type: string
          format: uuid
          description: Unique job identifier
        status:
          type: string
          enum: [queued, running, succeeded, failed]
          description: Current job status
        progress:
          type: integer
          minimum: 0
          maximum: 100
          description: Progress percentage (0-100)
        created_at:
          type: string
          format: date-time
          description: Job creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last status update timestamp
        completed_at:
          type: string
          format: date-time
          description: Job completion timestamp
        result:
          type: object
          description: Job result (when succeeded)
        error:
          $ref: '#/components/schemas/ProblemDetail'
          description: Error details (when failed)
        estimated_completion:
          type: string
          format: date-time
          description: Estimated completion time
        _links:
          $ref: '#/components/schemas/HATEOASLinks'
    
    # ------------------------------------------------------------------------
    # Webhook Metadata (enhanced for security)
    # ------------------------------------------------------------------------
    WebhookMeta:
      type: object
      properties:
        signature_header:
          type: string
          example: "X-Webhook-Signature"
          description: Header containing HMAC-SHA256 signature
        timestamp_header:
          type: string
          example: "X-Webhook-Timestamp"
          description: Header containing request timestamp
        key_id_header:
          type: string
          example: "X-Webhook-Key-Id"
          description: Header containing signing key identifier
        algorithm:
          type: string
          enum: [HMAC-SHA256]
          description: Signature algorithm (HMAC-SHA256 required)
        replay_window_seconds:
          type: integer
          minimum: 60
          maximum: 600
          default: 300
          description: Time window for replay attack prevention (seconds)
        clock_skew_seconds:
          type: integer
          minimum: 0
          maximum: 60
          default: 30
          description: Allowed clock skew between client and server
        retry:
          type: object
          properties:
            max_attempts:
              type: integer
              minimum: 1
              maximum: 10
              default: 3
            backoff:
              type: string
              enum: [linear, exponential]
              default: exponential
            initial_delay:
              type: integer
              minimum: 60
              maximum: 3600
              default: 60
              description: Initial retry delay in seconds

  # ==========================================================================
  # RESPONSES
  # ==========================================================================
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/bad-request"
            title: "Bad Request"
            status: 400
            detail: "The request could not be understood"
            instance: "/api/v2/inventory/products"
    
    Unauthorized:
      description: Unauthorized
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWWAuthenticate'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/unauthorized"
            title: "Unauthorized"
            status: 401
            detail: "Authentication required"
            instance: "/api/v2/inventory/products"
            # Include an example bearer challenge (also emitted as header)
            # WWW-Authenticate: Bearer realm="smackdab", error="invalid_token"
    
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/forbidden"
            title: "Forbidden"
            status: 403
            detail: "Insufficient permissions"
    
    NotFound:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/not-found"
            title: "Not Found"
            status: 404
            detail: "Resource not found"
    
    MethodNotAllowed:
      description: Method Not Allowed
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/method-not-allowed"
            title: "Method Not Allowed"
            status: 405
            detail: "The requested HTTP method is not allowed for this resource"
    
    NotAcceptable:
      description: Not Acceptable
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/not-acceptable"
            title: "Not Acceptable"
            status: 406
            detail: "Cannot produce response matching Accept header"
    
    Conflict:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/conflict"
            title: "Conflict"
            status: 409
            detail: "Resource already exists or version conflict"
    
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/validation-failed"
            title: "Validation Failed"
            status: 422
            detail: "The request data failed validation"
    
    PreconditionFailed:
      description: Precondition Failed (ETag mismatch)
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/precondition-failed"
            title: "Precondition Failed"
            status: 412
            detail: "The provided ETag does not match the current resource version"
    
    UnsupportedMediaType:
      description: Unsupported Media Type
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/unsupported-media-type"
            title: "Unsupported Media Type"
            status: 415
            detail: "The request Content-Type is not supported"
    
    PreconditionRequired:
      description: Precondition Required
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/precondition-required"
            title: "Precondition Required"
            status: 428
            detail: "This operation requires an If-Match header"
    
    TooManyRequests:
      description: Too Many Requests
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds until rate limit resets
        X-RateLimit-Limit:
          $ref: '#/components/headers/XRateLimitLimit'
        X-RateLimit-Remaining:
          $ref: '#/components/headers/XRateLimitRemaining'
        X-RateLimit-Reset:
          $ref: '#/components/headers/XRateLimitReset'
        X-Request-ID:
          $ref: '#/components/headers/XRequestId'
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/rate-limit"
            title: "Rate Limit Exceeded"
            status: 429
            detail: "Too many requests"
            correlation_id: "550e8400-e29b-41d4-a716-446655440000"
            request_id: "550e8400-e29b-41d4-a716-446655440000"
    
    InternalServerError:
      description: Internal Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/internal-error"
            title: "Internal Server Error"
            status: 500
            detail: "An unexpected error occurred"
            correlation_id: "550e8400-e29b-41d4-a716-446655440000"
    
    ServiceUnavailable:
      description: Service Unavailable
      headers:
        Retry-After:
          schema:
            type: integer
          description: Seconds until service is expected to be available
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ProblemDetail'
          example:
            type: "https://api.smackdab.com/problems/service-unavailable"
            title: "Service Unavailable"
            status: 503
            detail: "Service temporarily unavailable due to maintenance or overload"

# ============================================================================
# EXTENSION: RATE LIMITING (PROVEN, EXISTS IN CODEBASE)
# ============================================================================
x-rate-limiting:
  standard:
    requests: 1000
    window: 60
    description: Standard tier - 1000 requests per minute
  premium:
    requests: 5000
    window: 60
    description: Premium tier - 5000 requests per minute
  enterprise:
    requests: 10000
    window: 60
    description: Enterprise tier - 10000 requests per minute

# ============================================================================
# EXTENSION: CACHING STRATEGY (PROVEN, EXISTS IN CODEBASE)
# ============================================================================
x-caching-strategy:
  default:
    ttl: 60
    strategy: "private"
    vary: ["X-Organization-ID", "X-Branch-ID", "Authorization"]
  aggressive:
    ttl: 300
    strategy: "public"
    vary: ["Accept", "Accept-Language"]
  no-cache:
    ttl: 0
    strategy: "no-store"

# ============================================================================
# EXTENSION: PERFORMANCE SLAs (PROVEN, EXISTS IN CODEBASE)
# ============================================================================
x-performance-slas:
  read:
    p50: 50
    p95: 100
    p99: 200
  write:
    p50: 100
    p95: 500
    p99: 1000
  bulk:
    throughput: 10000  # records per minute
    batch_size: 1000

# ============================================================================
# EXTENSION: PLATFORM CONSTRAINTS (ENFORCEABLE BY LINTERS)
# ============================================================================
x-platform-constraints:
  database:
    postgres_citus_required: true
    no_cross_shard_fks: true
    no_materialized_views: true
    distribution_key: "organization_id"
  messaging:
    pulsar_required: true
    no_kafka: true
    no_rabbitmq: true
    no_sqs: true
  caching:
    dragonfly_preferred: true
    no_redis_direct: true
    redis_compatible_only: true
  patterns:
    no_saga_pattern: true
    event_driven_preferred: true
    row_level_tenancy: true

# ============================================================================
# EXTENSION: WEBHOOKS (3.0.3 COMPATIBLE VERSION)
# ============================================================================
x-webhooks:
  # HMAC-SHA256 Verification Process:
  # 1. Extract timestamp from X-Webhook-Timestamp header
  # 2. Concatenate: {timestamp}.{raw_request_body}
  # 3. Compute HMAC-SHA256 with shared secret
  # 4. Compare with X-Webhook-Signature using constant-time comparison
  # 5. Reject if timestamp is older than replay window (5 minutes)
  resourceCreated:
    post:
      summary: Resource created event
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [event_type, timestamp, data]
              properties:
                event_type:
                  type: string
                  enum: [resource.created]
                timestamp:
                  type: string
                  format: date-time
                data:
                  type: object
                organization_id:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Event received
        '410':
          description: Webhook deactivated
      x-webhook-policy:
        $ref: '#/components/schemas/WebhookMeta'

# ============================================================================
# EXTENSION: CONTENT NEGOTIATION AND CORS
# ============================================================================
x-content-negotiation:
  supported_media_types:
    - "application/json; charset=utf-8"
    - "application/problem+json; charset=utf-8"
  compression:
    supported: ["gzip", "br"]
    preferred: "br"
    description: "Accept-Encoding: gzip, br supported for all responses"
  i18n:
    accept_language: true
    content_language: true
    default_language: "en-US"
    supported_languages: ["en-US", "es", "fr", "de", "ja", "zh"]
  
x-cors-policy:
  allowed_origins:
    - "https://*.smackdab.com"
    - "http://localhost:*"
  allowed_headers:
    - "X-Organization-ID"
    - "X-Branch-ID"
    - "X-Idempotency-Key"
    - "X-Request-ID"
    - "X-Consistency"
    - "Accept-Version"
    - "If-Match"
    - "If-None-Match"
    - "traceparent"
    - "tracestate"
    - "baggage"
  exposed_headers:
    - "X-Total-Count"
    - "X-RateLimit-Limit"
    - "X-RateLimit-Remaining"
    - "X-RateLimit-Reset"
    - "X-Request-ID"
    - "ETag"
    - "Location"
    - "Retry-After"
  max_age: 86400
  allow_credentials: true

# ============================================================================
# EXTENSION: DEPRECATION STRATEGY (PROVEN)
# ============================================================================
x-deprecation-strategy:
  sunset_date: "2025-12-31"
  migration_guide: "https://docs.smackdab.com/migration/v1-to-v2"
  deprecated_endpoints:
    - path: "/api/v1/*"
      removal_date: "2025-06-30"
      alternative: "/api/v2/*"

# ============================================================================
# EXTENSION: LINTER RULES (SPECTRAL) - AUTHORITATIVE
# ============================================================================
# This section exists to keep our custom Spectral rules *close to the template*.
# CI will extract this block and write `.spectral.yaml` before linting.
# These rules enforce the Smackdab "contract of contracts" and prevent regressions.
x-spectral:
  extends:
    - "spectral:oas"
  rules:
    smackdab-oas-version-3-0-3:
      description: "OpenAPI version MUST be 3.0.3"
      severity: error
      given: "$"
      then:
        field: "openapi"
        function: pattern
        functionOptions:
          match: "^3\\.0\\.3$"

    smackdab-no-3-1-webhooks:
      description: "Top-level `webhooks` are 3.1+ only; use `x-webhooks` instead in 3.0.x"
      severity: error
      given: "$"
      then:
        field: "webhooks"
        function: falsy

    smackdab-no-placeholders:
      description: "Template placeholders like {domain}, {Resource}, {resources} MUST be replaced in concrete APIs"
      severity: error
      given: "$..*"
      then:
        function: pattern
        functionOptions:
          notMatch: "\\{(domain|Resource|resources|API Name|Specific Function)\\}"

    smackdab-unique-operationId:
      description: "All operationIds MUST be globally unique"
      severity: error
      given: "$.paths[*][*]"
      then:
        field: operationId
        function: defined
      # de-dup check (Spectral 'uniqueness' over a collection)
      # CI step will also enforce with a secondary script for stronger guarantees
    smackdab-unique-operationId-collection:
      description: "operationId de-dup collection check"
      severity: error
      given: "$.paths[*][*].operationId"
      then:
        function: unique

    smackdab-tenant-headers-required:
      description: "X-Organization-ID MUST be required on all operations (and X-Branch-ID when applicable)"
      severity: error
      given: "$.paths[*][*]"
      then:
        function: schema
        functionOptions:
          schema:
            type: object
            required: [parameters]
            properties:
              parameters:
                type: array
                contains:
                  type: object
                  anyOf:
                    - { "$ref": "#/components/parameters/OrganizationHeader" }
                    - { const: { "$ref": "#/components/parameters/OrganizationHeader" } }

    smackdab-keyset-pagination:
      description: "List endpoints MUST use key-set pagination (after_key/before_key) and MUST NOT use offset-based pagination"
      severity: error
      given: "$.paths[*].get"
      then:
        - field: parameters
          function: schema
          functionOptions:
            schema:
              type: array
              contains:
                type: object
                properties:
                  "$ref": { const: "#/components/parameters/AfterKey" }
        - function: pattern
          functionOptions:
            notMatch: "(?i)(offset|page_token|cursor|pageNumber|page_size)"

    smackdab-hateoas-links-present:
      description: "All 2xx responses MUST use ResponseEnvelope with _links"
      severity: error
      given: "$.paths[*][*].responses[/(^2\\d\\d$|^200$|^201$|^202$|^204$)/].content.*.schema"
      then:
        function: schema
        functionOptions:
          schema:
            anyOf:
              - { "$ref": "#/components/schemas/ResponseEnvelope" }
              - type: object
                properties:
                  allOf:
                    type: array
                    contains:
                      const:
                        "$ref": "#/components/schemas/ResponseEnvelope"

    smackdab-problem-json:
      description: "Error responses MUST use application/problem+json and ProblemDetail"
      severity: error
      given: "$.components.responses[*].content"
      then:
        function: schema
        functionOptions:
          schema:
            type: object
            required: ["application/problem+json"]

    smackdab-oauth2-scopes-resolved:
      description: "OAuth2 scopes MUST NOT contain placeholders in concrete APIs"
      severity: error
      given: "$.components.securitySchemes.OAuth2.flows.authorizationCode.scopes"
      then:
        function: pattern
        functionOptions:
          notMatch: "\\{domain\\}"

    smackdab-idempotency-on-unsafe:
      description: "POST and PATCH MUST define X-Idempotency-Key parameter"
      severity: error
      given: "$.paths[*].(post,patch)"
      then:
        field: parameters
        function: schema
        functionOptions:
          schema:
            type: array
            contains:
              type: object
              properties:
                "$ref": { const: "#/components/parameters/IdempotencyKey" }

    smackdab-etag-on-cacheables:
      description: "Cacheable responses MUST include ETag"
      severity: warn
      given: "$.paths[*].(get,post,patch).responses[/(^2\\d\\d$|^200$|^201$)/].headers"
      then:
        function: truthy
        field: ETag

    smackdab-rate-limit-headers:
      description: "Responses SHOULD include rate-limit headers"
      severity: warn
      given: "$.paths[*][*].responses[/(^2\\d\\d$|^429$)/].headers"
      then:
        function: schema
        functionOptions:
          schema:
            type: object
            properties:
              X-RateLimit-Limit: {}
              X-RateLimit-Remaining: {}
              X-RateLimit-Reset: {}

# ============================================================================
# EXTENSION: CI WORKFLOW (GITHUB ACTIONS) - AUTHORITATIVE
# ============================================================================
# CI will parse this block and write it to `.github/workflows/api-contract-ci.yml`
# so individual repos don't have to remember the exact incantations.
x-ci:
  github_actions_workflow: |
    name: API Contract CI
    on:
      pull_request:
      push:
        branches: [ main, release/* ]
    jobs:
      lint-validate:
        runs-on: ubuntu-latest
        steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Setup Node
            uses: actions/setup-node@v4
            with:
              node-version: 20

          - name: Install Spectral & oas-tools
            run: |
              npm i -g @stoplight/spectral-cli@6.x @redocly/cli@1.x ajv-cli@5.x

          - name: Extract Spectral rules from template
            shell: bash
            run: |
              awk '/^x-spectral:/{flag=1} flag{print} /^x-ci:/{flag=0}' .claude/templates/MASTER_API_TEMPLATE_v3.yaml > .spectral.yaml
              echo "extends: spectral:oas" >> .spectral.yaml

          - name: Lint all OpenAPI contracts
            run: |
              set -e
              find contracts/openapi -type f \( -name '*.yaml' -o -name '*.yml' -o -name '*.json' \) -print0 \
              | xargs -0 -I{} spectral lint {} --fail-severity=warn

          - name: Validate with Redocly (schema + refs)
            run: |
              redocly lint --skip-rule no-$ref-siblings --fail-on-warnings

          - name: Ensure OpenAPI is 3.0.3
            run: |
              ! grep -R --line-number -E '^[[:space:]]*openapi:[[:space:]]*3\\.(0\\.(?!3)|1\\.)' contracts/openapi || (echo "OpenAPI must be 3.0.3"; exit 1)

          - name: Fail if placeholders not replaced
            run: |
              ! grep -R --line-number -E '\\{(domain|Resource|resources|API Name|Specific Function)\\}' contracts/openapi || (echo "Placeholders must be replaced"; exit 1)

          - name: operationId uniqueness check
            run: |
              python3 - &lt;&lt;'PY'
              import sys, yaml, glob, collections
              ids=collections.Counter()
              for f in glob.glob('contracts/openapi/**/*.*', recursive=True):
                  if not f.endswith(('.yaml','.yml','.json')): continue
                  try:
                      with open(f) as fh:
                          spec=yaml.safe_load(fh)
                      for p,ops in (spec.get('paths') or {}).items():
                          for m,o in (ops or {}).items():
                              if not isinstance(o, dict): continue
                              if 'operationId' in o:
                                  ids[o['operationId']]+=1
                  except Exception:
                      pass
              dup=[k for k,v in ids.items() if v&gt;1]
              if dup:
                  print("Duplicate operationIds:", dup)
                  sys.exit(1)
              PY

          - name: Success
            run: echo "✅ API contracts passed lint & validation"
