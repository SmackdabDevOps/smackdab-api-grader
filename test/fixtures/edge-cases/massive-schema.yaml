openapi: "3.0.3"
info:
  title: "Massive Schema API"
  version: "1.0.0"
  description: "API with extremely large schemas for performance testing"

paths:
  /organizations/{orgId}/branches/{branchId}/massive:
    post:
      operationId: "createMassiveEntity"
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: branchId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MassiveEntity"
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MassiveEntity"

components:
  schemas:
    MassiveEntity:
      type: object
      required:
        - id
        - type
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: ["massive", "huge", "enormous", "gigantic", "colossal"]
        # 1000 individual properties
        field001:
          type: string
          minLength: 1
          maxLength: 255
          pattern: "^[a-zA-Z0-9_-]+$"
        field002:
          type: integer
          minimum: 1
          maximum: 1000000
        field003:
          type: number
          minimum: 0.0
          maximum: 999999.99
        field004:
          type: boolean
        field005:
          type: string
          format: date-time
        field006:
          type: string
          format: email
        field007:
          type: string
          format: uri
        field008:
          type: string
          format: uuid
        field009:
          type: array
          items:
            type: string
          minItems: 0
          maxItems: 100
        field010:
          type: object
          additionalProperties:
            type: string
        # Continue pattern for fields 011-100
        field011: { type: string, minLength: 1, maxLength: 255 }
        field012: { type: integer, minimum: 1, maximum: 1000000 }
        field013: { type: number, minimum: 0.0, maximum: 999999.99 }
        field014: { type: boolean }
        field015: { type: string, format: date-time }
        field016: { type: string, format: email }
        field017: { type: string, format: uri }
        field018: { type: string, format: uuid }
        field019: { type: array, items: { type: string }, minItems: 0, maxItems: 100 }
        field020: { type: object, additionalProperties: { type: string } }
        field021: { type: string, minLength: 1, maxLength: 255 }
        field022: { type: integer, minimum: 1, maximum: 1000000 }
        field023: { type: number, minimum: 0.0, maximum: 999999.99 }
        field024: { type: boolean }
        field025: { type: string, format: date-time }
        field026: { type: string, format: email }
        field027: { type: string, format: uri }
        field028: { type: string, format: uuid }
        field029: { type: array, items: { type: string }, minItems: 0, maxItems: 100 }
        field030: { type: object, additionalProperties: { type: string } }
        field031: { type: string, minLength: 1, maxLength: 255 }
        field032: { type: integer, minimum: 1, maximum: 1000000 }
        field033: { type: number, minimum: 0.0, maximum: 999999.99 }
        field034: { type: boolean }
        field035: { type: string, format: date-time }
        field036: { type: string, format: email }
        field037: { type: string, format: uri }
        field038: { type: string, format: uuid }
        field039: { type: array, items: { type: string }, minItems: 0, maxItems: 100 }
        field040: { type: object, additionalProperties: { type: string } }
        field041: { type: string, minLength: 1, maxLength: 255 }
        field042: { type: integer, minimum: 1, maximum: 1000000 }
        field043: { type: number, minimum: 0.0, maximum: 999999.99 }
        field044: { type: boolean }
        field045: { type: string, format: date-time }
        field046: { type: string, format: email }
        field047: { type: string, format: uri }
        field048: { type: string, format: uuid }
        field049: { type: array, items: { type: string }, minItems: 0, maxItems: 100 }
        field050: { type: object, additionalProperties: { type: string } }
        # Continue up to 100 fields with different types and complex validations
        field051: { type: string, pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$" }
        field052: { type: string, pattern: "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$" }
        field053: { type: string, pattern: "^\\+?1?-?\\(?([0-9]{3})\\)?[-\\s\\.]?([0-9]{3})[-\\s\\.]?([0-9]{4})$" }
        field054: { type: string, pattern: "^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$" }
        field055: { type: string, pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$" }
        # Large enums
        field056:
          type: string
          enum: [
            "value001", "value002", "value003", "value004", "value005", "value006", "value007", "value008", "value009", "value010",
            "value011", "value012", "value013", "value014", "value015", "value016", "value017", "value018", "value019", "value020",
            "value021", "value022", "value023", "value024", "value025", "value026", "value027", "value028", "value029", "value030",
            "value031", "value032", "value033", "value034", "value035", "value036", "value037", "value038", "value039", "value040",
            "value041", "value042", "value043", "value044", "value045", "value046", "value047", "value048", "value049", "value050",
            "value051", "value052", "value053", "value054", "value055", "value056", "value057", "value058", "value059", "value060",
            "value061", "value062", "value063", "value064", "value065", "value066", "value067", "value068", "value069", "value070",
            "value071", "value072", "value073", "value074", "value075", "value076", "value077", "value078", "value079", "value080",
            "value081", "value082", "value083", "value084", "value085", "value086", "value087", "value088", "value089", "value090",
            "value091", "value092", "value093", "value094", "value095", "value096", "value097", "value098", "value099", "value100"
          ]
        # Nested complex objects
        field057:
          type: object
          properties:
            nested001: { type: string }
            nested002: { type: integer }
            nested003: { type: boolean }
            nested004:
              type: object
              properties:
                deepNested001: { type: string }
                deepNested002: { type: integer }
                deepNested003:
                  type: array
                  items:
                    type: object
                    properties:
                      veryDeep001: { type: string }
                      veryDeep002: { type: number }
        # Large arrays with complex items
        field058:
          type: array
          minItems: 0
          maxItems: 10000
          items:
            type: object
            required: ["id", "type"]
            properties:
              id: { type: string, format: uuid }
              type: { type: string, enum: ["type1", "type2", "type3", "type4", "type5"] }
              data:
                type: object
                additionalProperties:
                  oneOf:
                    - type: string
                    - type: number
                    - type: boolean
                    - type: array
                      items: { type: string }
        # Continue pattern to reach 100 fields
        field059: { type: string }
        field060: { type: integer }
        field061: { type: number }
        field062: { type: boolean }
        field063: { type: string, format: date }
        field064: { type: string, format: time }
        field065: { type: string, format: binary }
        field066: { type: string, format: byte }
        field067: { type: string, format: password }
        field068: { type: array, items: { type: integer } }
        field069: { type: array, items: { type: number } }
        field070: { type: array, items: { type: boolean } }
        field071: { type: string, minLength: 10, maxLength: 1000 }
        field072: { type: integer, minimum: -1000000, maximum: 1000000 }
        field073: { type: number, minimum: -999999.99, maximum: 999999.99, multipleOf: 0.01 }
        field074: { type: string, enum: ["option1", "option2", "option3", "option4", "option5"] }
        field075: { type: integer, enum: [1, 2, 3, 4, 5, 10, 20, 50, 100] }
        field076: { type: array, items: { type: string, format: uuid }, uniqueItems: true }
        field077: { type: object, properties: { subField1: { type: string }, subField2: { type: integer } } }
        field078: { type: string, pattern: "^[A-Z]{2,3}[0-9]{3,6}$" }
        field079: { type: array, items: { type: object, additionalProperties: true }, minItems: 1, maxItems: 50 }
        field080: { type: string, format: hostname }
        field081: { type: string, format: ipv4 }
        field082: { type: string, format: ipv6 }
        field083: { type: string, format: json-pointer }
        field084: { type: string, format: relative-json-pointer }
        field085: { type: string, format: regex }
        field086: { type: integer, exclusiveMinimum: true, minimum: 0 }
        field087: { type: integer, exclusiveMaximum: true, maximum: 1000000 }
        field088: { type: number, exclusiveMinimum: true, minimum: 0.0 }
        field089: { type: number, exclusiveMaximum: true, maximum: 1000000.0 }
        field090: { type: array, items: { type: string }, contains: { const: "required-value" } }
        field091: { type: object, minProperties: 1, maxProperties: 100 }
        field092: { type: string, contentMediaType: "application/json" }
        field093: { type: string, contentEncoding: "base64" }
        field094: { type: array, items: { type: integer }, minItems: 5, maxItems: 500 }
        field095: { type: object, dependentRequired: { field096: ["field097"] } }
        field096: { type: string }
        field097: { type: string }
        field098: { type: array, prefixItems: [{ type: string }, { type: integer }, { type: boolean }] }
        field099: { type: object, patternProperties: { "^[a-z]+$": { type: string } } }
        field100: { oneOf: [{ type: string }, { type: integer }, { type: boolean }] }